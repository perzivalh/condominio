"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.6.
"""

from pathlib import Path
import os
from datetime import timedelta
import dj_database_url  # ðŸ‘ˆ importante para leer DATABASE_URL

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-$#@(2^+#9lw&fl0d&mnp=e=l+eds9heax_q4ic5rnjz1ismof^"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "True") == "True"

ALLOWED_HOSTS = ["*"]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database
# En local usarÃ¡ postgres con tus datos, en producciÃ³n Railway usa DATABASE_URL
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get(
            "DATABASE_URL",
            "postgres://condo:condo2025@127.0.0.1:5432/condominioDB"
        ),
        conn_max_age=600,
    )
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Media files (uploads)
MEDIA_URL = os.environ.get("MEDIA_URL", "/media/")
MEDIA_ROOT = os.path.join(BASE_DIR, os.environ.get("MEDIA_ROOT", "media"))

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST + JWT
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
}

# âš¡ CORS (para React en Vercel)
CORS_ALLOW_ALL_ORIGINS = False


# CSRF y CORS (para que el admin acepte el dominio de Railway)
CSRF_TRUSTED_ORIGINS = [
    "https://condominio-peach.vercel.app",
    "https://condominio-production.up.railway.app",
]

CORS_ALLOWED_ORIGINS = [
    "https://condominio-peach.vercel.app",
    "https://condominio-production.up.railway.app",
]

# Email
EMAIL_BACKEND = os.environ.get("EMAIL_BACKEND")

EMAIL_HOST_USER = (
    os.environ.get("EMAIL_HOST_USER")
    or os.environ.get("GMAIL_USER", "")
)

_raw_password = (
    os.environ.get("EMAIL_HOST_PASSWORD")
    or os.environ.get("GMAIL_APP_PASSWORD")
    or ""
)
EMAIL_HOST_PASSWORD = _raw_password.replace(" ", "")

EMAIL_HOST = os.environ.get("EMAIL_HOST", "")
if not EMAIL_HOST and EMAIL_HOST_USER.endswith("@gmail.com"):
    EMAIL_HOST = "smtp.gmail.com"

EMAIL_USE_SSL = os.environ.get("EMAIL_USE_SSL", "False") == "True"
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", "True") == "True"

if EMAIL_USE_SSL:
    EMAIL_USE_TLS = False

default_port = 465 if EMAIL_USE_SSL else 587
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", default_port))

EMAIL_TIMEOUT = int(os.environ.get("EMAIL_TIMEOUT", 20))

DEFAULT_FROM_EMAIL = (
    os.environ.get("DEFAULT_FROM_EMAIL")
    or EMAIL_HOST_USER
    or "no-reply@condominio.local"
)

if not EMAIL_BACKEND:
    if EMAIL_HOST and (EMAIL_HOST_USER or EMAIL_HOST_PASSWORD):
        EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    else:
        EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# Template opcional para link directo de reseteo
PASSWORD_RESET_URL_TEMPLATE = os.environ.get("PASSWORD_RESET_URL_TEMPLATE", "")
PASSWORD_RESET_TOKEN_MINUTES = int(os.environ.get("PASSWORD_RESET_TOKEN_MINUTES", 15))
PASSWORD_RESET_EMAIL_SUBJECT = os.environ.get(
    "PASSWORD_RESET_EMAIL_SUBJECT",
    "Instrucciones para restablecer tu contraseÃ±a",
)
